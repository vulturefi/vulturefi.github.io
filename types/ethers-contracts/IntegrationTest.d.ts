/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IntegrationTestInterface extends ethers.utils.Interface {
  functions: {
    "depositDai(uint256)": FunctionFragment;
    "depositUsdt(uint256)": FunctionFragment;
    "echidna_cash()": FunctionFragment;
    "echidna_solvency()": FunctionFragment;
    "echidna_total_supply()": FunctionFragment;
    "swapDai(uint256)": FunctionFragment;
    "swapUsdt(uint256)": FunctionFragment;
    "withdrawDai(uint256)": FunctionFragment;
    "withdrawDaiFromUsdt(uint256)": FunctionFragment;
    "withdrawUsdt(uint256)": FunctionFragment;
    "withdrawUsdtFromDai(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositDai",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUsdt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_cash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_solvency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_total_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapDai",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapUsdt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDai",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDaiFromUsdt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUsdt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUsdtFromDai",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "depositDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_cash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_solvency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_total_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapUsdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDaiFromUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUsdtFromDai",
    data: BytesLike
  ): Result;

  events: {
    "AssertionFailed()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertionFailed"): EventFragment;
}

export type AssertionFailedEvent = TypedEvent<[] & {}>;

export class IntegrationTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IntegrationTestInterface;

  functions: {
    depositDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    echidna_cash(overrides?: CallOverrides): Promise<[boolean]>;

    echidna_solvency(overrides?: CallOverrides): Promise<[boolean]>;

    echidna_total_supply(overrides?: CallOverrides): Promise<[boolean]>;

    swapDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDaiFromUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUsdtFromDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  depositDai(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUsdt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  echidna_cash(overrides?: CallOverrides): Promise<boolean>;

  echidna_solvency(overrides?: CallOverrides): Promise<boolean>;

  echidna_total_supply(overrides?: CallOverrides): Promise<boolean>;

  swapDai(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapUsdt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDai(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDaiFromUsdt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUsdt(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUsdtFromDai(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositDai(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositUsdt(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    echidna_cash(overrides?: CallOverrides): Promise<boolean>;

    echidna_solvency(overrides?: CallOverrides): Promise<boolean>;

    echidna_total_supply(overrides?: CallOverrides): Promise<boolean>;

    swapDai(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapUsdt(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawDai(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawDaiFromUsdt(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUsdt(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUsdtFromDai(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssertionFailed()"(): TypedEventFilter<[], {}>;

    AssertionFailed(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    depositDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    echidna_cash(overrides?: CallOverrides): Promise<BigNumber>;

    echidna_solvency(overrides?: CallOverrides): Promise<BigNumber>;

    echidna_total_supply(overrides?: CallOverrides): Promise<BigNumber>;

    swapDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDaiFromUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUsdtFromDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    echidna_cash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    echidna_solvency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    echidna_total_supply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDaiFromUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUsdt(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUsdtFromDai(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
