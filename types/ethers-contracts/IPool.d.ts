/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    "assetOf(address)": FunctionFragment;
    "deposit(address,uint256,address,uint256)": FunctionFragment;
    "getTokenAddresses()": FunctionFragment;
    "quoteMaxInitialAssetWithdrawable(address,address)": FunctionFragment;
    "quotePotentialSwap(address,address,uint256)": FunctionFragment;
    "quotePotentialWithdraw(address,uint256)": FunctionFragment;
    "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": FunctionFragment;
    "swap(address,address,uint256,uint256,address,uint256)": FunctionFragment;
    "withdraw(address,uint256,uint256,address,uint256)": FunctionFragment;
    "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "assetOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteMaxInitialAssetWithdrawable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePotentialSwap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePotentialWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePotentialWithdrawFromOtherAsset",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromOtherAsset",
    values: [string, string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "assetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteMaxInitialAssetWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePotentialSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePotentialWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePotentialWithdrawFromOtherAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromOtherAsset",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolInterface;

  functions: {
    assetOf(token: string, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxInitialAssetAmount: BigNumber }>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        fee: BigNumber;
        enoughCash: boolean;
      }
    >;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  assetOf(token: string, overrides?: CallOverrides): Promise<string>;

  deposit(
    token: string,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

  quoteMaxInitialAssetWithdrawable(
    initialToken: string,
    wantedToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePotentialSwap(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { potentialOutcome: BigNumber; haircut: BigNumber }
  >;

  quotePotentialWithdraw(
    token: string,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      fee: BigNumber;
      enoughCash: boolean;
    }
  >;

  quotePotentialWithdrawFromOtherAsset(
    initialToken: string,
    wantedToken: string,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

  swap(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    minimumToAmount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    liquidity: BigNumberish,
    minimumAmount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromOtherAsset(
    initialToken: string,
    wantedToken: string,
    liquidity: BigNumberish,
    minimumAmount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetOf(token: string, overrides?: CallOverrides): Promise<string>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        fee: BigNumber;
        enoughCash: boolean;
      }
    >;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { actualToAmount: BigNumber; haircut: BigNumber }
    >;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    assetOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
