/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AggregateAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregateAccount__factory>;
    getContractFactory(
      name: "Asset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Asset__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "IAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAsset__factory>;
    getContractFactory(
      name: "IChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkAggregator__factory>;
    getContractFactory(
      name: "IERC2981Royalties",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981Royalties__factory>;
    getContractFactory(
      name: "IMasterPlatypus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterPlatypus__factory>;
    getContractFactory(
      name: "IPlatypusNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlatypusNFT__factory>;
    getContractFactory(
      name: "IPlatypusRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlatypusRouter01__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPriceOracleGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleGetter__factory>;
    getContractFactory(
      name: "IPtp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPtp__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "IVeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVeERC20__factory>;
    getContractFactory(
      name: "IVePtp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVePtp__factory>;
    getContractFactory(
      name: "DSMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSMath__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ChainlinkProxyPriceProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkProxyPriceProvider__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "IERC20Joe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Joe__factory>;
    getContractFactory(
      name: "IJoeCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeCallee__factory>;
    getContractFactory(
      name: "IJoeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeFactory__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "JoeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JoeERC20__factory>;
    getContractFactory(
      name: "JoePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JoePair__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "MasterChefJoeV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChefJoeV3__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterChefJoe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChefJoe__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "SimpleRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleRewarder__factory>;
    getContractFactory(
      name: "PlatypusRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PlatypusRouter01__factory>;
    getContractFactory(
      name: "IntegrationTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IntegrationTest__factory>;
    getContractFactory(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC20__factory>;
    getContractFactory(
      name: "OwnableTestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableTestERC20__factory>;
    getContractFactory(
      name: "TestAggregateAccount99",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAggregateAccount99__factory>;
    getContractFactory(
      name: "TestAssetV00",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAssetV00__factory>;
    getContractFactory(
      name: "TestAssetV99",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAssetV99__factory>;
    getContractFactory(
      name: "TestChainlinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestChainlinkAggregator__factory>;
    getContractFactory(
      name: "TestDSMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDSMath__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestPoolV99",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPoolV99__factory>;
    getContractFactory(
      name: "TestSlippage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSlippage__factory>;
    getContractFactory(
      name: "TestWAVAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWAVAX__factory>;
    getContractFactory(
      name: "EmergencyWithdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmergencyWithdraw__factory>;
    getContractFactory(
      name: "IAsset",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAsset__factory>;
    getContractFactory(
      name: "MasterPlatypusV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterPlatypusV1__factory>;
    getContractFactory(
      name: "VeERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeERC20Upgradeable__factory>;
    getContractFactory(
      name: "VePtp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VePtp__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "TimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AggregateAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregateAccount>;
    getContractAt(
      name: "Asset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Asset>;
    getContractAt(
      name: "Timelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "IAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAsset>;
    getContractAt(
      name: "IChainlinkAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkAggregator>;
    getContractAt(
      name: "IERC2981Royalties",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981Royalties>;
    getContractAt(
      name: "IMasterPlatypus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterPlatypus>;
    getContractAt(
      name: "IPlatypusNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlatypusNFT>;
    getContractAt(
      name: "IPlatypusRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlatypusRouter01>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPriceOracleGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleGetter>;
    getContractAt(
      name: "IPtp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPtp>;
    getContractAt(
      name: "IRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "IVeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVeERC20>;
    getContractAt(
      name: "IVePtp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVePtp>;
    getContractAt(
      name: "DSMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSMath>;
    getContractAt(
      name: "Math",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ChainlinkProxyPriceProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkProxyPriceProvider>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "IERC20Joe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Joe>;
    getContractAt(
      name: "IJoeCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeCallee>;
    getContractAt(
      name: "IJoeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeFactory>;
    getContractAt(
      name: "IMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "JoeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JoeERC20>;
    getContractAt(
      name: "JoePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JoePair>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "IRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "MasterChefJoeV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChefJoeV3>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "BoringOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMasterChefJoe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChefJoe>;
    getContractAt(
      name: "IRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "SafeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "SimpleRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleRewarder>;
    getContractAt(
      name: "PlatypusRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PlatypusRouter01>;
    getContractAt(
      name: "IntegrationTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IntegrationTest>;
    getContractAt(
      name: "MintableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC20>;
    getContractAt(
      name: "OwnableTestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableTestERC20>;
    getContractAt(
      name: "TestAggregateAccount99",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAggregateAccount99>;
    getContractAt(
      name: "TestAssetV00",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAssetV00>;
    getContractAt(
      name: "TestAssetV99",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAssetV99>;
    getContractAt(
      name: "TestChainlinkAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestChainlinkAggregator>;
    getContractAt(
      name: "TestDSMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDSMath>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestPoolV99",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPoolV99>;
    getContractAt(
      name: "TestSlippage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSlippage>;
    getContractAt(
      name: "TestWAVAX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWAVAX>;
    getContractAt(
      name: "EmergencyWithdraw",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmergencyWithdraw>;
    getContractAt(
      name: "IAsset",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAsset>;
    getContractAt(
      name: "MasterPlatypusV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterPlatypusV1>;
    getContractAt(
      name: "VeERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeERC20Upgradeable>;
    getContractAt(
      name: "VePtp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VePtp>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
