/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VePtpInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "generationRate()": FunctionFragment;
    "getStakedNft(address)": FunctionFragment;
    "getStakedPtp(address)": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "invVoteThreshold()": FunctionFragment;
    "isUser(address)": FunctionFragment;
    "masterPlatypus()": FunctionFragment;
    "maxCap()": FunctionFragment;
    "name()": FunctionFragment;
    "nft()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "ptp()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGenerationRate(uint256)": FunctionFragment;
    "setInvVoteThreshold(uint256)": FunctionFragment;
    "setMasterPlatypus(address)": FunctionFragment;
    "setMaxCap(uint256)": FunctionFragment;
    "setNftAddress(address)": FunctionFragment;
    "setWhitelist(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstakeNft()": FunctionFragment;
    "users(address)": FunctionFragment;
    "whitelist()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedNft",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedPtp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "invVoteThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "masterPlatypus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "ptp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGenerationRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvVoteThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterPlatypus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeNft",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedPtp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invVoteThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterPlatypus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ptp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGenerationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvVoteThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterPlatypus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Burn(address,uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "StakedNft(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "UnstakedNft(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedNft"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, BigNumber] & { account: string; value: BigNumber }
>;

export type ClaimedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber] & { beneficiary: string; value: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type StakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type StakedNftEvent = TypedEvent<
  [string, BigNumber] & { user: string; nftId: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type UnstakedNftEvent = TypedEvent<
  [string, BigNumber] & { user: string; nftId: BigNumber }
>;

export class VePtp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VePtpInterface;

  functions: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(_addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakedNft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakedPtp(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotes(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _ptp: string,
      _masterPlatypus: string,
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invVoteThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    isUser(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    masterPlatypus(overrides?: CallOverrides): Promise<[string]>;

    maxCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    ptp(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGenerationRate(
      _generationRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInvVoteThreshold(
      _invVoteThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMasterPlatypus(
      _masterPlatypus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAddress(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeNft(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        lastRelease: BigNumber;
        stakedNftId: BigNumber;
      }
    >;

    whitelist(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generationRate(overrides?: CallOverrides): Promise<BigNumber>;

  getStakedNft(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStakedPtp(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVotes(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _ptp: string,
    _masterPlatypus: string,
    _nft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invVoteThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  isUser(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  masterPlatypus(overrides?: CallOverrides): Promise<string>;

  maxCap(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nft(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    _from: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  ptp(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGenerationRate(
    _generationRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInvVoteThreshold(
    _invVoteThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMasterPlatypus(
    _masterPlatypus: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCap(
    _maxCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAddress(
    _nft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _whitelist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeNft(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      lastRelease: BigNumber;
      stakedNftId: BigNumber;
    }
  >;

  whitelist(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimable(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    generationRate(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedNft(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakedPtp(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ptp: string,
      _masterPlatypus: string,
      _nft: string,
      overrides?: CallOverrides
    ): Promise<void>;

    invVoteThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isUser(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    masterPlatypus(overrides?: CallOverrides): Promise<string>;

    maxCap(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nft(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    ptp(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGenerationRate(
      _generationRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvVoteThreshold(
      _invVoteThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterPlatypus(
      _masterPlatypus: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCap(_maxCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNftAddress(_nft: string, overrides?: CallOverrides): Promise<void>;

    setWhitelist(_whitelist: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstakeNft(overrides?: CallOverrides): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        lastRelease: BigNumber;
        stakedNftId: BigNumber;
      }
    >;

    whitelist(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Burn(address,uint256)"(
      account?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; value: BigNumber }
    >;

    Burn(
      account?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; value: BigNumber }
    >;

    "Claimed(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Claimed(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "Mint(address,uint256)"(
      beneficiary?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; value: BigNumber }
    >;

    Mint(
      beneficiary?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; value: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Staked(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Staked(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "StakedNft(address,uint256)"(
      user?: string | null,
      nftId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; nftId: BigNumber }
    >;

    StakedNft(
      user?: string | null,
      nftId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; nftId: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unstaked(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Unstaked(
      user?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "UnstakedNft(address,uint256)"(
      user?: string | null,
      nftId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; nftId: BigNumber }
    >;

    UnstakedNft(
      user?: string | null,
      nftId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; nftId: BigNumber }
    >;
  };

  estimateGas: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generationRate(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedNft(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakedPtp(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ptp: string,
      _masterPlatypus: string,
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invVoteThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isUser(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    masterPlatypus(overrides?: CallOverrides): Promise<BigNumber>;

    maxCap(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    ptp(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGenerationRate(
      _generationRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInvVoteThreshold(
      _invVoteThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMasterPlatypus(
      _masterPlatypus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAddress(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeNft(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generationRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedNft(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedPtp(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _ptp: string,
      _masterPlatypus: string,
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invVoteThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUser(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterPlatypus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ptp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGenerationRate(
      _generationRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInvVoteThreshold(
      _invVoteThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMasterPlatypus(
      _masterPlatypus: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAddress(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeNft(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
