/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAggregateAccount99,
  TestAggregateAccount99Interface,
} from "../TestAggregateAccount99";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "accountName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "accountName_",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isStable_",
        type: "bool",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isStable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "accountName_",
        type: "string",
      },
    ],
    name: "setAccountName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d60806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100db578063c5e5798514610103578063caa5b29b14610118578063f2fde38b1461012b57600080fd5b806309047bdd1461008d5780632e95adad146100af57806354fd4d50146100c4578063715018a6146100d3575b600080fd5b60665461009a9060ff1681565b60405190151581526020015b60405180910390f35b6100c26100bd366004610b92565b61013e565b005b604051606381526020016100a6565b6100c261026c565b60335460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a6565b61010b6102f9565b6040516100a69190610bcf565b6100c2610126366004610c42565b610387565b6100c2610139366004610c99565b610552565b60335473ffffffffffffffffffffffffffffffffffffffff1633146101c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000815111610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f506c6174797075733a20416767726567617465206163636f756e74206e616d6560448201527f2063616e6e6f74206265207a65726f000000000000000000000000000000000060648201526084016101bb565b8051610268906065906020840190610a1f565b5050565b60335473ffffffffffffffffffffffffffffffffffffffff1633146102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bb565b6102f76000610682565b565b6065805461030690610cd6565b80601f016020809104026020016040519081016040528092919081815260200182805461033290610cd6565b801561037f5780601f106103545761010080835404028352916020019161037f565b820191906000526020600020905b81548152906001019060200180831161036257829003601f168201915b505050505081565b600054610100900460ff16806103a0575060005460ff16155b61042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016101bb565b600054610100900460ff1615801561046b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60008351116104d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f504c543a4143434f554e545f4e414d455f564f4944000000000000000000000060448201526064016101bb565b6104de6106f9565b82516104f1906065906020860190610a1f565b50606680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055801561054d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b60335473ffffffffffffffffffffffffffffffffffffffff1633146105d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bb565b73ffffffffffffffffffffffffffffffffffffffff8116610676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101bb565b61067f81610682565b50565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610712575060005460ff16155b61079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016101bb565b600054610100900460ff161580156107dd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6107e561081e565b6107ed610932565b801561067f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680610837575060005460ff16155b6108c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016101bb565b600054610100900460ff161580156107ed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101179055801561067f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff168061094b575060005460ff16155b6109d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016101bb565b600054610100900460ff16158015610a1657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6107ed33610682565b828054610a2b90610cd6565b90600052602060002090601f016020900481019282610a4d5760008555610a93565b82601f10610a6657805160ff1916838001178555610a93565b82800160010185558215610a93579182015b82811115610a93578251825591602001919060010190610a78565b50610a9f929150610aa3565b5090565b5b80821115610a9f5760008155600101610aa4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610af857600080fd5b813567ffffffffffffffff80821115610b1357610b13610ab8565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610b5957610b59610ab8565b81604052838152866020858801011115610b7257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610ba457600080fd5b813567ffffffffffffffff811115610bbb57600080fd5b610bc784828501610ae7565b949350505050565b600060208083528351808285015260005b81811015610bfc57858101830151858201604001528201610be0565b81811115610c0e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008060408385031215610c5557600080fd5b823567ffffffffffffffff811115610c6c57600080fd5b610c7885828601610ae7565b92505060208301358015158114610c8e57600080fd5b809150509250929050565b600060208284031215610cab57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610ccf57600080fd5b9392505050565b600181811c90821680610cea57607f821691505b60208210811415610d24577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212204c76dcb7910942e28b26130962cebab47374d7123d15469951add99351d6f24b64736f6c63430008090033";

export class TestAggregateAccount99__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAggregateAccount99> {
    return super.deploy(overrides || {}) as Promise<TestAggregateAccount99>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAggregateAccount99 {
    return super.attach(address) as TestAggregateAccount99;
  }
  connect(signer: Signer): TestAggregateAccount99__factory {
    return super.connect(signer) as TestAggregateAccount99__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregateAccount99Interface {
    return new utils.Interface(_abi) as TestAggregateAccount99Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregateAccount99 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestAggregateAccount99;
  }
}
