/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestWAVAX, TestWAVAXInterface } from "../TestWAVAX";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "guy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061085f806100206000396000f3fe6080604052600436106100c05760003560e01c8063313ce56711610074578063a9059cbb1161004e578063a9059cbb1461025d578063d0e30db01461027d578063dd62ed3e1461028557600080fd5b8063313ce567146101c057806370a08231146101e757806395d89b411461021457600080fd5b806318160ddd116100a557806318160ddd1461016357806323b872dd146101805780632e1a7d4d146101a057600080fd5b806306fdde03146100d4578063095ea7b31461013357600080fd5b366100cf576100cd6102bd565b005b600080fd5b3480156100e057600080fd5b5061011d6040518060400160405280600c81526020017f577261707065642041766178000000000000000000000000000000000000000081525081565b60405161012a9190610662565b60405180910390f35b34801561013f57600080fd5b5061015361014e3660046106fe565b610318565b604051901515815260200161012a565b34801561016f57600080fd5b50475b60405190815260200161012a565b34801561018c57600080fd5b5061015361019b366004610728565b610391565b3480156101ac57600080fd5b506100cd6101bb366004610764565b6105a8565b3480156101cc57600080fd5b506101d5601281565b60405160ff909116815260200161012a565b3480156101f357600080fd5b5061017261020236600461077d565b60006020819052908152604090205481565b34801561022057600080fd5b5061011d6040518060400160405280600581526020017f574156415800000000000000000000000000000000000000000000000000000081525081565b34801561026957600080fd5b506101536102783660046106fe565b61064e565b6100cd6102bd565b34801561029157600080fd5b506101726102a0366004610798565b600160209081526000928352604080842090915290825290205481565b33600090815260208190526040812080543492906102dc9084906107fa565b909155505060405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103809086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120548211156103c357600080fd5b73ffffffffffffffffffffffffffffffffffffffff84163314801590610439575073ffffffffffffffffffffffffffffffffffffffff841660009081526001602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14155b156104c15773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832033845290915290205482111561047b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152812080548492906104bb908490610812565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040812080548492906104f6908490610812565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040812080548492906105309084906107fa565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161059691815260200190565b60405180910390a35060019392505050565b336000908152602081905260409020548111156105c457600080fd5b33600090815260208190526040812080548392906105e3908490610812565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610615573d6000803e3d6000fd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b600061065b338484610391565b9392505050565b600060208083528351808285015260005b8181101561068f57858101830151858201604001528201610673565b818111156106a1576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106f957600080fd5b919050565b6000806040838503121561071157600080fd5b61071a836106d5565b946020939093013593505050565b60008060006060848603121561073d57600080fd5b610746846106d5565b9250610754602085016106d5565b9150604084013590509250925092565b60006020828403121561077657600080fd5b5035919050565b60006020828403121561078f57600080fd5b61065b826106d5565b600080604083850312156107ab57600080fd5b6107b4836106d5565b91506107c2602084016106d5565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561080d5761080d6107cb565b500190565b600082821015610824576108246107cb565b50039056fea2646970667358221220f3ff4d65c334dadd749b810cdf8334ccaa10a13b6e1b8c4b718cdb382ff0694664736f6c63430008090033";

export class TestWAVAX__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestWAVAX> {
    return super.deploy(overrides || {}) as Promise<TestWAVAX>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestWAVAX {
    return super.attach(address) as TestWAVAX;
  }
  connect(signer: Signer): TestWAVAX__factory {
    return super.connect(signer) as TestWAVAX__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWAVAXInterface {
    return new utils.Interface(_abi) as TestWAVAXInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWAVAX {
    return new Contract(address, _abi, signerOrProvider) as TestWAVAX;
  }
}
