/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestChainlinkAggregator,
  TestChainlinkAggregatorInterface,
} from "../TestChainlinkAggregator";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "latestAnswer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "latestTimestamp_",
        type: "uint256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610279806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638205bf6a1161005b5780638205bf6a146100f95780639a6fc8f514610101578063e9c58f8514610154578063feaf968c1461016f57600080fd5b8063313ce5671461008d57806350d25bcd146100a157806354fd4d50146100b35780637284e416146100ba575b600080fd5b604051600881526020015b60405180910390f35b6000545b604051908152602001610098565b60006100a5565b604080518082018252601381527f4d6f636b20636861696e6c696e6b20666565640000000000000000000000000060208201529051610098919061017b565b6001546100a5565b61011d61010f3660046101ee565b506000908190819081908190565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610098565b61016d610162366004610221565b600091909155600155565b005b6000805481428161011d565b600060208083528351808285015260005b818110156101a85785810183015185820160400152820161018c565b818111156101ba576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561020057600080fd5b813569ffffffffffffffffffff8116811461021a57600080fd5b9392505050565b6000806040838503121561023457600080fd5b5050803592602090910135915056fea2646970667358221220929084e5c7f495ca673f3a5750b4be9de166d7e1a9eb66e723b4f68237042d0864736f6c63430008090033";

export class TestChainlinkAggregator__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestChainlinkAggregator> {
    return super.deploy(overrides || {}) as Promise<TestChainlinkAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestChainlinkAggregator {
    return super.attach(address) as TestChainlinkAggregator;
  }
  connect(signer: Signer): TestChainlinkAggregator__factory {
    return super.connect(signer) as TestChainlinkAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestChainlinkAggregatorInterface {
    return new utils.Interface(_abi) as TestChainlinkAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestChainlinkAggregator;
  }
}
