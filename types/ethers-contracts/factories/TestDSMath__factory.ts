/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestDSMath, TestDSMathInterface } from "../TestDSMath";

const _abi = [
  {
    inputs: [],
    name: "RAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WAD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "reciprocal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "rmul",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "rpow",
    outputs: [
      {
        internalType: "uint256",
        name: "z",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "wdiv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "wmul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610362806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636a1460241161005b5780636a146024146100cd5780638b9af5c1146100dc5780638f907195146100ef578063f1e3bfe51461010257600080fd5b8063552033c4146100825780635fde731c146100a757806367457022146100ba575b600080fd5b6100956b033b2e3c9fd0803ce800000081565b60405190815260200160405180910390f35b6100956100b5366004610216565b610115565b6100956100c8366004610216565b610152565b610095670de0b6b3a764000081565b6100956100ea366004610216565b610176565b6100956100fd366004610216565b61018c565b610095610110366004610238565b610202565b6000816101236002826102af565b610135670de0b6b3a7640000866102c3565b61013f9190610300565b61014991906102af565b90505b92915050565b60006b033b2e3c9fd0803ce800000061016c6002826102af565b61013584866102c3565b6000670de0b6b3a764000061016c6002826102af565b6000610199600283610318565b6101af576b033b2e3c9fd0803ce80000006101b1565b825b90506101be6002836102af565b91505b811561014c576101d18384610152565b92506101de600283610318565b156101f0576101ed8184610152565b90505b6101fb6002836102af565b91506101c1565b600061014c670de0b6b3a764000083610115565b6000806040838503121561022957600080fd5b50508035926020909101359150565b60006020828403121561024a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000826102be576102be610251565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156102fb576102fb610280565b500290565b6000821982111561031357610313610280565b500190565b60008261032757610327610251565b50069056fea2646970667358221220d1d07658b6db593fe727e3d67ed9fff4197c3a4afb762b0948f23cefc5cf4f0364736f6c63430008090033";

export class TestDSMath__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestDSMath> {
    return super.deploy(overrides || {}) as Promise<TestDSMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestDSMath {
    return super.attach(address) as TestDSMath;
  }
  connect(signer: Signer): TestDSMath__factory {
    return super.connect(signer) as TestDSMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDSMathInterface {
    return new utils.Interface(_abi) as TestDSMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDSMath {
    return new Contract(address, _abi, signerOrProvider) as TestDSMath;
  }
}
