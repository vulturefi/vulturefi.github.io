/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    "addAsset(address,address)": FunctionFragment;
    "assetOf(address)": FunctionFragment;
    "deposit(address,uint256,address,uint256)": FunctionFragment;
    "getC1()": FunctionFragment;
    "getDev()": FunctionFragment;
    "getHaircutRate()": FunctionFragment;
    "getMaxPriceDeviation()": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "getRetentionRatio()": FunctionFragment;
    "getSlippageParamK()": FunctionFragment;
    "getSlippageParamN()": FunctionFragment;
    "getTokenAddresses()": FunctionFragment;
    "getXThreshold()": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "quoteMaxInitialAssetWithdrawable(address,address)": FunctionFragment;
    "quotePotentialSwap(address,address,uint256)": FunctionFragment;
    "quotePotentialWithdraw(address,uint256)": FunctionFragment;
    "quotePotentialWithdrawFromOtherAsset(address,address,uint256)": FunctionFragment;
    "removeAsset(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDev(address)": FunctionFragment;
    "setHaircutRate(uint256)": FunctionFragment;
    "setMaxPriceDeviation(uint256)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setRetentionRatio(uint256)": FunctionFragment;
    "setSlippageParams(uint256,uint256,uint256,uint256)": FunctionFragment;
    "swap(address,address,uint256,uint256,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(address,uint256,uint256,address,uint256)": FunctionFragment;
    "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "assetOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getC1", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHaircutRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPriceDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRetentionRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSlippageParamK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSlippageParamN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getXThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteMaxInitialAssetWithdrawable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePotentialSwap",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePotentialWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePotentialWithdrawFromOtherAsset",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHaircutRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRetentionRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippageParams",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromOtherAsset",
    values: [string, string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getC1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHaircutRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRetentionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlippageParamK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlippageParamN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteMaxInitialAssetWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePotentialSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePotentialWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePotentialWithdrawFromOtherAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHaircutRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRetentionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippageParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromOtherAsset",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(address,address)": EventFragment;
    "Deposit(address,address,uint256,uint256,address)": EventFragment;
    "DevUpdated(address,address)": EventFragment;
    "HaircutRateUpdated(uint256,uint256)": EventFragment;
    "OracleUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PriceDeviationUpdated(uint256,uint256)": EventFragment;
    "RetentionRatioUpdated(uint256,uint256)": EventFragment;
    "SlippageParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Swap(address,address,address,uint256,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HaircutRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceDeviationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RetentionRatioUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlippageParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AssetAddedEvent = TypedEvent<
  [string, string] & { token: string; asset: string }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    sender: string;
    token: string;
    amount: BigNumber;
    liquidity: BigNumber;
    to: string;
  }
>;

export type DevUpdatedEvent = TypedEvent<
  [string, string] & { previousDev: string; newDev: string }
>;

export type HaircutRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { previousHaircut: BigNumber; newHaircut: BigNumber }
>;

export type OracleUpdatedEvent = TypedEvent<
  [string, string] & { previousOracle: string; newOracle: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PriceDeviationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    previousPriceDeviation: BigNumber;
    newPriceDeviation: BigNumber;
  }
>;

export type RetentionRatioUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    previousRetentionRatio: BigNumber;
    newRetentionRatio: BigNumber;
  }
>;

export type SlippageParamsUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    previousK: BigNumber;
    newK: BigNumber;
    previousN: BigNumber;
    newN: BigNumber;
    previousC1: BigNumber;
    newC1: BigNumber;
    previousXThreshold: BigNumber;
    newXThreshold: BigNumber;
  }
>;

export type SwapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string] & {
    sender: string;
    fromToken: string;
    toToken: string;
    fromAmount: BigNumber;
    toAmount: BigNumber;
    to: string;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    sender: string;
    token: string;
    amount: BigNumber;
    liquidity: BigNumber;
    to: string;
  }
>;

export class Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolInterface;

  functions: {
    addAsset(
      token: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetOf(token: string, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getC1(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDev(overrides?: CallOverrides): Promise<[string]>;

    getHaircutRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getRetentionRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlippageParamK(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlippageParamN(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getXThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxInitialAssetAmount: BigNumber }>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        fee: BigNumber;
        enoughCash: boolean;
      }
    >;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    removeAsset(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDev(
      dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHaircutRate(
      haircutRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceDeviation(
      maxPriceDeviation_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRetentionRatio(
      retentionRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlippageParams(
      k_: BigNumberish,
      n_: BigNumberish,
      c1_: BigNumberish,
      xThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAsset(
    token: string,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetOf(token: string, overrides?: CallOverrides): Promise<string>;

  deposit(
    token: string,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getC1(overrides?: CallOverrides): Promise<BigNumber>;

  getDev(overrides?: CallOverrides): Promise<string>;

  getHaircutRate(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getRetentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getSlippageParamK(overrides?: CallOverrides): Promise<BigNumber>;

  getSlippageParamN(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

  getXThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  quoteMaxInitialAssetWithdrawable(
    initialToken: string,
    wantedToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePotentialSwap(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { potentialOutcome: BigNumber; haircut: BigNumber }
  >;

  quotePotentialWithdraw(
    token: string,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      fee: BigNumber;
      enoughCash: boolean;
    }
  >;

  quotePotentialWithdrawFromOtherAsset(
    initialToken: string,
    wantedToken: string,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

  removeAsset(
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDev(
    dev: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHaircutRate(
    haircutRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceDeviation(
    maxPriceDeviation_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRetentionRatio(
    retentionRatio_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlippageParams(
    k_: BigNumberish,
    n_: BigNumberish,
    c1_: BigNumberish,
    xThreshold_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    minimumToAmount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    liquidity: BigNumberish,
    minimumAmount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromOtherAsset(
    initialToken: string,
    wantedToken: string,
    liquidity: BigNumberish,
    minimumAmount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(
      token: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assetOf(token: string, overrides?: CallOverrides): Promise<string>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getC1(overrides?: CallOverrides): Promise<BigNumber>;

    getDev(overrides?: CallOverrides): Promise<string>;

    getHaircutRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getRetentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamK(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamN(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

    getXThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        fee: BigNumber;
        enoughCash: boolean;
      }
    >;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    removeAsset(key: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDev(dev: string, overrides?: CallOverrides): Promise<void>;

    setHaircutRate(
      haircutRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceDeviation(
      maxPriceDeviation_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRetentionRatio(
      retentionRatio_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippageParams(
      k_: BigNumberish,
      n_: BigNumberish,
      c1_: BigNumberish,
      xThreshold_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { actualToAmount: BigNumber; haircut: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AssetAdded(address,address)"(
      token?: string | null,
      asset?: string | null
    ): TypedEventFilter<[string, string], { token: string; asset: string }>;

    AssetAdded(
      token?: string | null,
      asset?: string | null
    ): TypedEventFilter<[string, string], { token: string; asset: string }>;

    "Deposit(address,address,uint256,uint256,address)"(
      sender?: string | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        token: string;
        amount: BigNumber;
        liquidity: BigNumber;
        to: string;
      }
    >;

    Deposit(
      sender?: string | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        token: string;
        amount: BigNumber;
        liquidity: BigNumber;
        to: string;
      }
    >;

    "DevUpdated(address,address)"(
      previousDev?: string | null,
      newDev?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousDev: string; newDev: string }
    >;

    DevUpdated(
      previousDev?: string | null,
      newDev?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousDev: string; newDev: string }
    >;

    "HaircutRateUpdated(uint256,uint256)"(
      previousHaircut?: null,
      newHaircut?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousHaircut: BigNumber; newHaircut: BigNumber }
    >;

    HaircutRateUpdated(
      previousHaircut?: null,
      newHaircut?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousHaircut: BigNumber; newHaircut: BigNumber }
    >;

    "OracleUpdated(address,address)"(
      previousOracle?: string | null,
      newOracle?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOracle: string; newOracle: string }
    >;

    OracleUpdated(
      previousOracle?: string | null,
      newOracle?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOracle: string; newOracle: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PriceDeviationUpdated(uint256,uint256)"(
      previousPriceDeviation?: null,
      newPriceDeviation?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousPriceDeviation: BigNumber; newPriceDeviation: BigNumber }
    >;

    PriceDeviationUpdated(
      previousPriceDeviation?: null,
      newPriceDeviation?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousPriceDeviation: BigNumber; newPriceDeviation: BigNumber }
    >;

    "RetentionRatioUpdated(uint256,uint256)"(
      previousRetentionRatio?: null,
      newRetentionRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousRetentionRatio: BigNumber; newRetentionRatio: BigNumber }
    >;

    RetentionRatioUpdated(
      previousRetentionRatio?: null,
      newRetentionRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { previousRetentionRatio: BigNumber; newRetentionRatio: BigNumber }
    >;

    "SlippageParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      previousK?: null,
      newK?: null,
      previousN?: null,
      newN?: null,
      previousC1?: null,
      newC1?: null,
      previousXThreshold?: null,
      newXThreshold?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        previousK: BigNumber;
        newK: BigNumber;
        previousN: BigNumber;
        newN: BigNumber;
        previousC1: BigNumber;
        newC1: BigNumber;
        previousXThreshold: BigNumber;
        newXThreshold: BigNumber;
      }
    >;

    SlippageParamsUpdated(
      previousK?: null,
      newK?: null,
      previousN?: null,
      newN?: null,
      previousC1?: null,
      newC1?: null,
      previousXThreshold?: null,
      newXThreshold?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        previousK: BigNumber;
        newK: BigNumber;
        previousN: BigNumber;
        newN: BigNumber;
        previousC1: BigNumber;
        newC1: BigNumber;
        previousXThreshold: BigNumber;
        newXThreshold: BigNumber;
      }
    >;

    "Swap(address,address,address,uint256,uint256,address)"(
      sender?: string | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        toAmount: BigNumber;
        to: string;
      }
    >;

    Swap(
      sender?: string | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        toAmount: BigNumber;
        to: string;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdraw(address,address,uint256,uint256,address)"(
      sender?: string | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        token: string;
        amount: BigNumber;
        liquidity: BigNumber;
        to: string;
      }
    >;

    Withdraw(
      sender?: string | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        token: string;
        amount: BigNumber;
        liquidity: BigNumber;
        to: string;
      }
    >;
  };

  estimateGas: {
    addAsset(
      token: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getC1(overrides?: CallOverrides): Promise<BigNumber>;

    getDev(overrides?: CallOverrides): Promise<BigNumber>;

    getHaircutRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getRetentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamK(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamN(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getXThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAsset(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDev(
      dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHaircutRate(
      haircutRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPriceDeviation(
      maxPriceDeviation_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRetentionRatio(
      retentionRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlippageParams(
      k_: BigNumberish,
      n_: BigNumberish,
      c1_: BigNumberish,
      xThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      token: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getC1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHaircutRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxPriceDeviation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRetentionRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlippageParamK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlippageParamN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getXThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteMaxInitialAssetWithdrawable(
      initialToken: string,
      wantedToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePotentialSwap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdraw(
      token: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAsset(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDev(
      dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHaircutRate(
      haircutRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceDeviation(
      maxPriceDeviation_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRetentionRatio(
      retentionRatio_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlippageParams(
      k_: BigNumberish,
      n_: BigNumberish,
      c1_: BigNumberish,
      xThreshold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      minimumToAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromOtherAsset(
      initialToken: string,
      wantedToken: string,
      liquidity: BigNumberish,
      minimumAmount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
